{"ast":null,"code":"import _slicedToArray from\"/Users/BOM/Desktop/WEB/react-project/react-beginner/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function UseEffect(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),counter=_useState2[0],setCounter=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),keyword=_useState4[0],setKeyword=_useState4[1];var onClick=function onClick(){return setCounter(function(prev){return prev+1;});};var iRunOnlyOnce=function iRunOnlyOnce(){return console.log('I run Only Once');};var onChange=function onChange(event){return setKeyword(event.target.value);};console.log('I run all the time');// useEffect(iRunOnlyOnce, []);\nuseEffect(function(){console.log('I run ONLY ONCE');},[]);useEffect(function(){console.log(\"I run when 'keyword' changes.\");},[keyword]);useEffect(function(){console.log(\"I run when 'counter' changes.\");},[counter]);// console.log('Search for ', keyword)\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"useEffect\"}),/*#__PURE__*/_jsx(\"h3\",{children:counter}),/*#__PURE__*/_jsx(\"button\",{style:{fontSize:\"20px\"},onClick:onClick,children:\"Click \\uD83D\\uDE0E\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Search Practice\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search here...\",value:keyword,onChange:onChange})]});}// 📘 NOTE\n// - 두 개의 argument를 가지는 함수\n// - 첫 번째 argument는 우리가 딱 한번만 실행하고 싶은 코드를 넣는다.\n// - 두 번째는 [] -> 배열을 넣어준다.\n// - useEffect가 componenet의 첫 번째 렌더 시점에 iRunOnlyOnce함수를 호출하고\n// - 상태를 변화시키면 더이상 iRunOnlyOnce는 호출되지 않는다.\n// - 비어있는 배열을 사용하는 것은 한 번만 호출하고 싶을 때 사용한다. \n//   배열이 비어 있어 react가 지켜볼게 없기 때문에 한 번만 실행 시키는 것\n// - 언제 코드를 실행할 지 선택권을 가질 수 있고, 배열에 넣은 요소에 변화가 있을 때만 해당 코드를 실행시킬 수 있는 방법이다.\nexport default UseEffect;","map":{"version":3,"sources":["/Users/BOM/Desktop/WEB/react-project/react-beginner/src/practice/UseEffect.js"],"names":["React","useState","useEffect","UseEffect","counter","setCounter","keyword","setKeyword","onClick","prev","iRunOnlyOnce","console","log","onChange","event","target","value","fontSize"],"mappings":"yIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,C,wFAEA,QAASC,CAAAA,SAAT,EAAqB,CACnB,cAA8BF,QAAQ,CAAC,CAAD,CAAtC,wCAAOG,OAAP,eAAgBC,UAAhB,eACA,eAA8BJ,QAAQ,CAAC,EAAD,CAAtC,yCAAOK,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SAAMH,CAAAA,UAAU,CAAC,SAAAI,IAAI,QAAIA,CAAAA,IAAI,CAAG,CAAX,EAAL,CAAhB,EAAhB,CACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SAAMC,CAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAN,EAArB,CACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,QAAWP,CAAAA,UAAU,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArB,EAAjB,CAEAL,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACA;AACAV,SAAS,CAAC,UAAM,CACdS,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACD,CAFQ,CAEN,EAFM,CAAT,CAIAV,SAAS,CAAC,UAAM,CACdS,OAAO,CAACC,GAAR,CAAY,+BAAZ,EACD,CAFQ,CAEN,CAACN,OAAD,CAFM,CAAT,CAIAJ,SAAS,CAAC,UAAM,CACdS,OAAO,CAACC,GAAR,CAAY,+BAAZ,EACD,CAFQ,CAEN,CAACR,OAAD,CAFM,CAAT,CAIA;AAEA,mBAAO,oCACL,iCADK,cAEL,oBAAKA,OAAL,EAFK,cAGL,eAAQ,KAAK,CAAE,CAAEa,QAAQ,CAAE,MAAZ,CAAf,CAAqC,OAAO,CAAET,OAA9C,gCAHK,cAIL,uCAJK,cAKL,cACE,IAAI,CAAC,MADP,CAEE,WAAW,CAAC,gBAFd,CAGE,KAAK,CAAEF,OAHT,CAIE,QAAQ,CAAEO,QAJZ,EALK,GAAP,CAYD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,cAAeV,CAAAA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction UseEffect() {\n  const [counter, setCounter] = useState(0);\n  const [keyword, setKeyword] = useState(\"\");\n\n  const onClick = () => setCounter(prev => prev + 1);\n  const iRunOnlyOnce = () => console.log('I run Only Once');\n  const onChange = (event) => setKeyword(event.target.value);\n\n  console.log('I run all the time');\n  // useEffect(iRunOnlyOnce, []);\n  useEffect(() => {\n    console.log('I run ONLY ONCE');\n  }, []);\n\n  useEffect(() => {\n    console.log(\"I run when 'keyword' changes.\");\n  }, [keyword]);\n\n  useEffect(() => {\n    console.log(\"I run when 'counter' changes.\");\n  }, [counter]);\n\n  // console.log('Search for ', keyword)\n\n  return <div>\n    <h1>useEffect</h1>\n    <h3>{counter}</h3>\n    <button style={{ fontSize: \"20px\" }} onClick={onClick}>Click 😎</button>\n    <h3>Search Practice</h3>\n    <input\n      type=\"text\"\n      placeholder=\"Search here...\"\n      value={keyword}\n      onChange={onChange}\n    />\n  </div>\n}\n\n// 📘 NOTE\n// - 두 개의 argument를 가지는 함수\n// - 첫 번째 argument는 우리가 딱 한번만 실행하고 싶은 코드를 넣는다.\n// - 두 번째는 [] -> 배열을 넣어준다.\n// - useEffect가 componenet의 첫 번째 렌더 시점에 iRunOnlyOnce함수를 호출하고\n// - 상태를 변화시키면 더이상 iRunOnlyOnce는 호출되지 않는다.\n// - 비어있는 배열을 사용하는 것은 한 번만 호출하고 싶을 때 사용한다. \n//   배열이 비어 있어 react가 지켜볼게 없기 때문에 한 번만 실행 시키는 것\n// - 언제 코드를 실행할 지 선택권을 가질 수 있고, 배열에 넣은 요소에 변화가 있을 때만 해당 코드를 실행시킬 수 있는 방법이다.\n\n\nexport default UseEffect;"]},"metadata":{},"sourceType":"module"}